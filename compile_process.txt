FORM 1: SOURCE CODE
------------------------------------------------------------

var x = 1;
var x2 = 1;

var i = 0;
while (i < 20)
{
	i = i + 1;
	var x3 = x2 + x;
	x = x2;
	x2 = x3;
	print(x3);
}



FORM 2: TOKENS
------------------------------------------------------------

TOKEN		TYPE

var			identifier
x           identifier
=           operator
1           literal
;           semicolon

var         identifier
x2          identifier
=           operator
1           literal
;           semicolon

var         identifier
i           identifier
=           operator
0           literal
;           semicolon

while       identifier
(           lparen
i           identifier
<           operator
20          literal
)           rparen

{           lbrace

i           identifier
=           operator
i           identifier
+           operator
1           literal
;           semicolon

var         identifier
x3          identifier
=           operator
x2          identifier
+           operator
x           identifier
;           semicolon

x           identifier
=           operator
x2          identifier
;           semicolon

x2          identifier
=           operator
x3          identifier
;           semicolon

print       identifier
(           lparen
x3          identifier
)           rparen
;           semicolon

}           rbrace



FORM 3: AST (Abstract Syntax Tree)
------------------------------------------------------------

LABEL			VALUE

root			sequence
statement[1]		declaration
identifier				x
value					constant
value						1
statement[2]		declaration
identifier				x2
value					constant
value						1
statement[3]		declaration
value					i
value					constant
literal						0
statement[4]		while
condition				binary_operator
operator					<
lhs							variable
identifier						i
rhs							constant
value							20
body[1]					assignment
variable					i
value						binary_operator
operator						+
lhs								variable
identifier							i
rhs								constant
value								1
body[2]					declaration
identifier					x3
expression					binary_operator
lhs								variable
identifier							x2
rhs								variable
identifier							x
body[3]					assignment
variable					x
expression					variable
identifier						x2
body[3]					assignment
variable					x2
expression					variable
identifier						x3
body[5]					function call
function					print
arguments[0]				variable
identifier						x3



FORM 4: INSTRUCTIONS (Virtual-Machine Code)
------------------------------------------------------------

OPCODE	PARAMETER	ORIGIN				STACK					COMMENT

push	1			var x = 1			x
push	1			var x2 = 1			x, x2

push	0			var i = 0			x, x2, i
load	0			while(i < 20)		x, x2, i, (i)
push	20								x, x2, i, (i), [20]
lt										x, x2, i, {<}
jz		12								x, x2, i
push	1			i = i + 1			x, x2, i, [1]			special case, because i is on top of stack
add										x, x2, i				when adding
load	1			var x3 = x2 + x		x, x2, i, (x2)
load	3								x, x2, i, (x2), (x)
add										x, x2, i, x3
load	2			x = x2				x, x2, i, x3, (x2)
str		4								x, x2, i, x3
load	0			x2 = x3				x, x2, i, x3, (x3)
str		3								x, x2, i, x3
cout				print(x3)			x, x2, i
jmp		-14			while (i < 20)

stop











-- with a reg machine ---------
register [a],[b],[c],[d]
mov <dst>, <constant>
lt <lhs>, <rhs>
mov <dst>
	from stack
add <op1>, <op2>
	-> [a]
push <src|constant>
pop <dst>
-------------------------------
mov b, 1		var x = 1
mov c, 1		var x2 = 1
mov d, 0		var i = 0
:loop
lt d, 20		while (i < 20)
jz exit
add d, 1		i = i + 1
mov d, a
add c, b		var x3 = x2 + x
mov b, c		x = x2
mov c, a		x2 = x3
push c			print(x3)
cout
jmp loop
:exit
stop
